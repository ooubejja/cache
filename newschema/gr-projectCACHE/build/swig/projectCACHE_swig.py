# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_projectCACHE_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_projectCACHE_swig')
    _projectCACHE_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_projectCACHE_swig', [dirname(__file__)])
        except ImportError:
            import _projectCACHE_swig
            return _projectCACHE_swig
        try:
            _mod = imp.load_module('_projectCACHE_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _projectCACHE_swig = swig_import_helper()
    del swig_import_helper
else:
    import _projectCACHE_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _projectCACHE_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _projectCACHE_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _projectCACHE_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _projectCACHE_swig.high_res_timer_epoch()
class polarEnc_b(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(N, m_files, b_chunks, nb_strg, id_user, spack_len, len_tag_key):
        """
        make(int const N, int m_files, int b_chunks, int nb_strg, int id_user, int spack_len, std::string const & len_tag_key) -> polarEnc_b_sptr

        Return a shared_ptr to a new instance of projectCACHE::polarEnc_b.

        To avoid accidental use of raw pointers, projectCACHE::polarEnc_b's constructor is in a private implementation class. projectCACHE::polarEnc_b::make is the public interface for creating new instances.

        Params: (N, K_w, K_s, SNR_w, SNR_s)
        """
        return _projectCACHE_swig.polarEnc_b_make(N, m_files, b_chunks, nb_strg, id_user, spack_len, len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _projectCACHE_swig.delete_polarEnc_b
    __del__ = lambda self: None
polarEnc_b_swigregister = _projectCACHE_swig.polarEnc_b_swigregister
polarEnc_b_swigregister(polarEnc_b)

def polarEnc_b_make(N, m_files, b_chunks, nb_strg, id_user, spack_len, len_tag_key):
    """
    polarEnc_b_make(int const N, int m_files, int b_chunks, int nb_strg, int id_user, int spack_len, std::string const & len_tag_key) -> polarEnc_b_sptr

    Return a shared_ptr to a new instance of projectCACHE::polarEnc_b.

    To avoid accidental use of raw pointers, projectCACHE::polarEnc_b's constructor is in a private implementation class. projectCACHE::polarEnc_b::make is the public interface for creating new instances.

    Params: (N, K_w, K_s, SNR_w, SNR_s)
    """
    return _projectCACHE_swig.polarEnc_b_make(N, m_files, b_chunks, nb_strg, id_user, spack_len, len_tag_key)

class polarEnc_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::projectCACHE::polarEnc_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::projectCACHE::polarEnc_b)> self) -> polarEnc_b_sptr
        __init__(boost::shared_ptr<(gr::projectCACHE::polarEnc_b)> self, polarEnc_b p) -> polarEnc_b_sptr
        """
        this = _projectCACHE_swig.new_polarEnc_b_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(polarEnc_b_sptr self) -> polarEnc_b"""
        return _projectCACHE_swig.polarEnc_b_sptr___deref__(self)

    __swig_destroy__ = _projectCACHE_swig.delete_polarEnc_b_sptr
    __del__ = lambda self: None

    def make(self, N, m_files, b_chunks, nb_strg, id_user, spack_len, len_tag_key):
        """
        make(polarEnc_b_sptr self, int const N, int m_files, int b_chunks, int nb_strg, int id_user, int spack_len, std::string const & len_tag_key) -> polarEnc_b_sptr

        Return a shared_ptr to a new instance of projectCACHE::polarEnc_b.

        To avoid accidental use of raw pointers, projectCACHE::polarEnc_b's constructor is in a private implementation class. projectCACHE::polarEnc_b::make is the public interface for creating new instances.

        Params: (N, K_w, K_s, SNR_w, SNR_s)
        """
        return _projectCACHE_swig.polarEnc_b_sptr_make(self, N, m_files, b_chunks, nb_strg, id_user, spack_len, len_tag_key)


    def history(self):
        """history(polarEnc_b_sptr self) -> unsigned int"""
        return _projectCACHE_swig.polarEnc_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(polarEnc_b_sptr self, int which, int delay)
        declare_sample_delay(polarEnc_b_sptr self, unsigned int delay)
        """
        return _projectCACHE_swig.polarEnc_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(polarEnc_b_sptr self, int which) -> unsigned int"""
        return _projectCACHE_swig.polarEnc_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(polarEnc_b_sptr self) -> int"""
        return _projectCACHE_swig.polarEnc_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(polarEnc_b_sptr self) -> double"""
        return _projectCACHE_swig.polarEnc_b_sptr_relative_rate(self)


    def start(self):
        """start(polarEnc_b_sptr self) -> bool"""
        return _projectCACHE_swig.polarEnc_b_sptr_start(self)


    def stop(self):
        """stop(polarEnc_b_sptr self) -> bool"""
        return _projectCACHE_swig.polarEnc_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(polarEnc_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _projectCACHE_swig.polarEnc_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(polarEnc_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _projectCACHE_swig.polarEnc_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(polarEnc_b_sptr self) -> int"""
        return _projectCACHE_swig.polarEnc_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(polarEnc_b_sptr self, int m)"""
        return _projectCACHE_swig.polarEnc_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(polarEnc_b_sptr self)"""
        return _projectCACHE_swig.polarEnc_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(polarEnc_b_sptr self) -> bool"""
        return _projectCACHE_swig.polarEnc_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(polarEnc_b_sptr self, int m)"""
        return _projectCACHE_swig.polarEnc_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(polarEnc_b_sptr self) -> int"""
        return _projectCACHE_swig.polarEnc_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(polarEnc_b_sptr self, int i) -> long"""
        return _projectCACHE_swig.polarEnc_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(polarEnc_b_sptr self, long max_output_buffer)
        set_max_output_buffer(polarEnc_b_sptr self, int port, long max_output_buffer)
        """
        return _projectCACHE_swig.polarEnc_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(polarEnc_b_sptr self, int i) -> long"""
        return _projectCACHE_swig.polarEnc_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(polarEnc_b_sptr self, long min_output_buffer)
        set_min_output_buffer(polarEnc_b_sptr self, int port, long min_output_buffer)
        """
        return _projectCACHE_swig.polarEnc_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(polarEnc_b_sptr self, int which) -> float
        pc_input_buffers_full(polarEnc_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.polarEnc_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(polarEnc_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(polarEnc_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.polarEnc_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(polarEnc_b_sptr self, int which) -> float
        pc_input_buffers_full_var(polarEnc_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.polarEnc_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(polarEnc_b_sptr self, int which) -> float
        pc_output_buffers_full(polarEnc_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.polarEnc_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(polarEnc_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(polarEnc_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.polarEnc_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(polarEnc_b_sptr self, int which) -> float
        pc_output_buffers_full_var(polarEnc_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.polarEnc_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(polarEnc_b_sptr self) -> float"""
        return _projectCACHE_swig.polarEnc_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(polarEnc_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _projectCACHE_swig.polarEnc_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(polarEnc_b_sptr self)"""
        return _projectCACHE_swig.polarEnc_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(polarEnc_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _projectCACHE_swig.polarEnc_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(polarEnc_b_sptr self) -> int"""
        return _projectCACHE_swig.polarEnc_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(polarEnc_b_sptr self) -> int"""
        return _projectCACHE_swig.polarEnc_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(polarEnc_b_sptr self, int priority) -> int"""
        return _projectCACHE_swig.polarEnc_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(polarEnc_b_sptr self) -> std::string"""
        return _projectCACHE_swig.polarEnc_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(polarEnc_b_sptr self) -> std::string"""
        return _projectCACHE_swig.polarEnc_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(polarEnc_b_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.polarEnc_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(polarEnc_b_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.polarEnc_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(polarEnc_b_sptr self) -> long"""
        return _projectCACHE_swig.polarEnc_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(polarEnc_b_sptr self) -> basic_block_sptr"""
        return _projectCACHE_swig.polarEnc_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(polarEnc_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _projectCACHE_swig.polarEnc_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(polarEnc_b_sptr self) -> std::string"""
        return _projectCACHE_swig.polarEnc_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(polarEnc_b_sptr self, std::string name)"""
        return _projectCACHE_swig.polarEnc_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(polarEnc_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _projectCACHE_swig.polarEnc_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(polarEnc_b_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.polarEnc_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(polarEnc_b_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.polarEnc_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(polarEnc_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _projectCACHE_swig.polarEnc_b_sptr_message_subscribers(self, which_port)

polarEnc_b_sptr_swigregister = _projectCACHE_swig.polarEnc_b_sptr_swigregister
polarEnc_b_sptr_swigregister(polarEnc_b_sptr)


polarEnc_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
polarEnc_b = polarEnc_b.make;

class PolarDec_b(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        """
        make(int const arg1, int arg2, int arg3, int arg4, int arg5, unsigned int arg6, int arg7, int arg8, std::string const & arg9) -> PolarDec_b_sptr

        Return a shared_ptr to a new instance of projectCACHE::PolarDec_b.

        To avoid accidental use of raw pointers, projectCACHE::PolarDec_b's constructor is in a private implementation class. projectCACHE::PolarDec_b::make is the public interface for creating new instances.

        Params: (N, K_w, K_s, SNR_w, SNR_s, lengthtagname)
        """
        return _projectCACHE_swig.PolarDec_b_make(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

    make = staticmethod(make)
    __swig_destroy__ = _projectCACHE_swig.delete_PolarDec_b
    __del__ = lambda self: None
PolarDec_b_swigregister = _projectCACHE_swig.PolarDec_b_swigregister
PolarDec_b_swigregister(PolarDec_b)

def PolarDec_b_make(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    """
    PolarDec_b_make(int const arg2, int arg3, int arg4, int arg5, int arg6, unsigned int arg7, int arg8, int arg9, std::string const & arg10) -> PolarDec_b_sptr

    Return a shared_ptr to a new instance of projectCACHE::PolarDec_b.

    To avoid accidental use of raw pointers, projectCACHE::PolarDec_b's constructor is in a private implementation class. projectCACHE::PolarDec_b::make is the public interface for creating new instances.

    Params: (N, K_w, K_s, SNR_w, SNR_s, lengthtagname)
    """
    return _projectCACHE_swig.PolarDec_b_make(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

class PolarDec_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::projectCACHE::PolarDec_b)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::projectCACHE::PolarDec_b)> self) -> PolarDec_b_sptr
        __init__(boost::shared_ptr<(gr::projectCACHE::PolarDec_b)> self, PolarDec_b p) -> PolarDec_b_sptr
        """
        this = _projectCACHE_swig.new_PolarDec_b_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(PolarDec_b_sptr self) -> PolarDec_b"""
        return _projectCACHE_swig.PolarDec_b_sptr___deref__(self)

    __swig_destroy__ = _projectCACHE_swig.delete_PolarDec_b_sptr
    __del__ = lambda self: None

    def make(self, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
        """
        make(PolarDec_b_sptr self, int const arg1, int arg2, int arg3, int arg4, int arg5, unsigned int arg6, int arg7, int arg8, std::string const & arg9) -> PolarDec_b_sptr

        Return a shared_ptr to a new instance of projectCACHE::PolarDec_b.

        To avoid accidental use of raw pointers, projectCACHE::PolarDec_b's constructor is in a private implementation class. projectCACHE::PolarDec_b::make is the public interface for creating new instances.

        Params: (N, K_w, K_s, SNR_w, SNR_s, lengthtagname)
        """
        return _projectCACHE_swig.PolarDec_b_sptr_make(self, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)


    def history(self):
        """history(PolarDec_b_sptr self) -> unsigned int"""
        return _projectCACHE_swig.PolarDec_b_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PolarDec_b_sptr self, int which, int delay)
        declare_sample_delay(PolarDec_b_sptr self, unsigned int delay)
        """
        return _projectCACHE_swig.PolarDec_b_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(PolarDec_b_sptr self, int which) -> unsigned int"""
        return _projectCACHE_swig.PolarDec_b_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(PolarDec_b_sptr self) -> int"""
        return _projectCACHE_swig.PolarDec_b_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(PolarDec_b_sptr self) -> double"""
        return _projectCACHE_swig.PolarDec_b_sptr_relative_rate(self)


    def start(self):
        """start(PolarDec_b_sptr self) -> bool"""
        return _projectCACHE_swig.PolarDec_b_sptr_start(self)


    def stop(self):
        """stop(PolarDec_b_sptr self) -> bool"""
        return _projectCACHE_swig.PolarDec_b_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(PolarDec_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _projectCACHE_swig.PolarDec_b_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(PolarDec_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _projectCACHE_swig.PolarDec_b_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(PolarDec_b_sptr self) -> int"""
        return _projectCACHE_swig.PolarDec_b_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(PolarDec_b_sptr self, int m)"""
        return _projectCACHE_swig.PolarDec_b_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PolarDec_b_sptr self)"""
        return _projectCACHE_swig.PolarDec_b_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PolarDec_b_sptr self) -> bool"""
        return _projectCACHE_swig.PolarDec_b_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(PolarDec_b_sptr self, int m)"""
        return _projectCACHE_swig.PolarDec_b_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(PolarDec_b_sptr self) -> int"""
        return _projectCACHE_swig.PolarDec_b_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(PolarDec_b_sptr self, int i) -> long"""
        return _projectCACHE_swig.PolarDec_b_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PolarDec_b_sptr self, long max_output_buffer)
        set_max_output_buffer(PolarDec_b_sptr self, int port, long max_output_buffer)
        """
        return _projectCACHE_swig.PolarDec_b_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(PolarDec_b_sptr self, int i) -> long"""
        return _projectCACHE_swig.PolarDec_b_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PolarDec_b_sptr self, long min_output_buffer)
        set_min_output_buffer(PolarDec_b_sptr self, int port, long min_output_buffer)
        """
        return _projectCACHE_swig.PolarDec_b_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PolarDec_b_sptr self, int which) -> float
        pc_input_buffers_full(PolarDec_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.PolarDec_b_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PolarDec_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(PolarDec_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.PolarDec_b_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PolarDec_b_sptr self, int which) -> float
        pc_input_buffers_full_var(PolarDec_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.PolarDec_b_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PolarDec_b_sptr self, int which) -> float
        pc_output_buffers_full(PolarDec_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.PolarDec_b_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PolarDec_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(PolarDec_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.PolarDec_b_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PolarDec_b_sptr self, int which) -> float
        pc_output_buffers_full_var(PolarDec_b_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.PolarDec_b_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(PolarDec_b_sptr self) -> float"""
        return _projectCACHE_swig.PolarDec_b_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(PolarDec_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _projectCACHE_swig.PolarDec_b_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(PolarDec_b_sptr self)"""
        return _projectCACHE_swig.PolarDec_b_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(PolarDec_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _projectCACHE_swig.PolarDec_b_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(PolarDec_b_sptr self) -> int"""
        return _projectCACHE_swig.PolarDec_b_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(PolarDec_b_sptr self) -> int"""
        return _projectCACHE_swig.PolarDec_b_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(PolarDec_b_sptr self, int priority) -> int"""
        return _projectCACHE_swig.PolarDec_b_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(PolarDec_b_sptr self) -> std::string"""
        return _projectCACHE_swig.PolarDec_b_sptr_name(self)


    def symbol_name(self):
        """symbol_name(PolarDec_b_sptr self) -> std::string"""
        return _projectCACHE_swig.PolarDec_b_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(PolarDec_b_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.PolarDec_b_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(PolarDec_b_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.PolarDec_b_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(PolarDec_b_sptr self) -> long"""
        return _projectCACHE_swig.PolarDec_b_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(PolarDec_b_sptr self) -> basic_block_sptr"""
        return _projectCACHE_swig.PolarDec_b_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(PolarDec_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _projectCACHE_swig.PolarDec_b_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(PolarDec_b_sptr self) -> std::string"""
        return _projectCACHE_swig.PolarDec_b_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(PolarDec_b_sptr self, std::string name)"""
        return _projectCACHE_swig.PolarDec_b_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(PolarDec_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _projectCACHE_swig.PolarDec_b_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(PolarDec_b_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.PolarDec_b_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(PolarDec_b_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.PolarDec_b_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(PolarDec_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _projectCACHE_swig.PolarDec_b_sptr_message_subscribers(self, which_port)

PolarDec_b_sptr_swigregister = _projectCACHE_swig.PolarDec_b_sptr_swigregister
PolarDec_b_sptr_swigregister(PolarDec_b_sptr)


PolarDec_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PolarDec_b = PolarDec_b.make;

class crc32_1_bb(object):
    """
    Byte-stream CRC block.

    Input: stream of bytes, which form a packet. The first byte of the packet has a tag with key "length" and the value being the number of bytes in the packet.

    Output: The same bytes as incoming, but trailing a CRC32 of the packet. The tag is re-set to the new length.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """
        make(bool check=False, std::string const & lengthtagname) -> crc32_1_bb_sptr



        Params: (check, lengthtagname)
        """
        return _projectCACHE_swig.crc32_1_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _projectCACHE_swig.delete_crc32_1_bb
    __del__ = lambda self: None
crc32_1_bb_swigregister = _projectCACHE_swig.crc32_1_bb_swigregister
crc32_1_bb_swigregister(crc32_1_bb)

def crc32_1_bb_make(*args, **kwargs):
    """
    crc32_1_bb_make(bool check=False, std::string const & lengthtagname) -> crc32_1_bb_sptr



    Params: (check, lengthtagname)
    """
    return _projectCACHE_swig.crc32_1_bb_make(*args, **kwargs)

class crc32_1_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::projectCACHE::crc32_1_bb)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::projectCACHE::crc32_1_bb)> self) -> crc32_1_bb_sptr
        __init__(boost::shared_ptr<(gr::projectCACHE::crc32_1_bb)> self, crc32_1_bb p) -> crc32_1_bb_sptr
        """
        this = _projectCACHE_swig.new_crc32_1_bb_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(crc32_1_bb_sptr self) -> crc32_1_bb"""
        return _projectCACHE_swig.crc32_1_bb_sptr___deref__(self)

    __swig_destroy__ = _projectCACHE_swig.delete_crc32_1_bb_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """
        make(crc32_1_bb_sptr self, bool check=False, std::string const & lengthtagname) -> crc32_1_bb_sptr



        Params: (check, lengthtagname)
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(crc32_1_bb_sptr self) -> unsigned int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(crc32_1_bb_sptr self, int which, int delay)
        declare_sample_delay(crc32_1_bb_sptr self, unsigned int delay)
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(crc32_1_bb_sptr self, int which) -> unsigned int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(crc32_1_bb_sptr self) -> int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(crc32_1_bb_sptr self) -> double"""
        return _projectCACHE_swig.crc32_1_bb_sptr_relative_rate(self)


    def start(self):
        """start(crc32_1_bb_sptr self) -> bool"""
        return _projectCACHE_swig.crc32_1_bb_sptr_start(self)


    def stop(self):
        """stop(crc32_1_bb_sptr self) -> bool"""
        return _projectCACHE_swig.crc32_1_bb_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(crc32_1_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _projectCACHE_swig.crc32_1_bb_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(crc32_1_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _projectCACHE_swig.crc32_1_bb_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(crc32_1_bb_sptr self) -> int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(crc32_1_bb_sptr self, int m)"""
        return _projectCACHE_swig.crc32_1_bb_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(crc32_1_bb_sptr self)"""
        return _projectCACHE_swig.crc32_1_bb_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(crc32_1_bb_sptr self) -> bool"""
        return _projectCACHE_swig.crc32_1_bb_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(crc32_1_bb_sptr self, int m)"""
        return _projectCACHE_swig.crc32_1_bb_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(crc32_1_bb_sptr self) -> int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(crc32_1_bb_sptr self, int i) -> long"""
        return _projectCACHE_swig.crc32_1_bb_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(crc32_1_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(crc32_1_bb_sptr self, int port, long max_output_buffer)
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(crc32_1_bb_sptr self, int i) -> long"""
        return _projectCACHE_swig.crc32_1_bb_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(crc32_1_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(crc32_1_bb_sptr self, int port, long min_output_buffer)
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(crc32_1_bb_sptr self, int which) -> float
        pc_input_buffers_full(crc32_1_bb_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(crc32_1_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(crc32_1_bb_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(crc32_1_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(crc32_1_bb_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(crc32_1_bb_sptr self, int which) -> float
        pc_output_buffers_full(crc32_1_bb_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(crc32_1_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(crc32_1_bb_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(crc32_1_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(crc32_1_bb_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(crc32_1_bb_sptr self) -> float"""
        return _projectCACHE_swig.crc32_1_bb_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(crc32_1_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _projectCACHE_swig.crc32_1_bb_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(crc32_1_bb_sptr self)"""
        return _projectCACHE_swig.crc32_1_bb_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(crc32_1_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _projectCACHE_swig.crc32_1_bb_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(crc32_1_bb_sptr self) -> int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(crc32_1_bb_sptr self) -> int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(crc32_1_bb_sptr self, int priority) -> int"""
        return _projectCACHE_swig.crc32_1_bb_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(crc32_1_bb_sptr self) -> std::string"""
        return _projectCACHE_swig.crc32_1_bb_sptr_name(self)


    def symbol_name(self):
        """symbol_name(crc32_1_bb_sptr self) -> std::string"""
        return _projectCACHE_swig.crc32_1_bb_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(crc32_1_bb_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.crc32_1_bb_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(crc32_1_bb_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.crc32_1_bb_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(crc32_1_bb_sptr self) -> long"""
        return _projectCACHE_swig.crc32_1_bb_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(crc32_1_bb_sptr self) -> basic_block_sptr"""
        return _projectCACHE_swig.crc32_1_bb_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(crc32_1_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _projectCACHE_swig.crc32_1_bb_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(crc32_1_bb_sptr self) -> std::string"""
        return _projectCACHE_swig.crc32_1_bb_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(crc32_1_bb_sptr self, std::string name)"""
        return _projectCACHE_swig.crc32_1_bb_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(crc32_1_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _projectCACHE_swig.crc32_1_bb_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(crc32_1_bb_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.crc32_1_bb_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(crc32_1_bb_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.crc32_1_bb_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(crc32_1_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _projectCACHE_swig.crc32_1_bb_sptr_message_subscribers(self, which_port)

crc32_1_bb_sptr_swigregister = _projectCACHE_swig.crc32_1_bb_sptr_swigregister
crc32_1_bb_sptr_swigregister(crc32_1_bb_sptr)


crc32_1_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
crc32_1_bb = crc32_1_bb.make;

class ofdm_frame_equalizer1_vcvc(object):
    """
    OFDM frame equalizer.

    Performs equalization in one or two dimensions on a tagged OFDM frame.

    This does two things: First, it removes the coarse carrier offset. If a tag is found on the first item with the key 'ofdm_sync_carr_offset', this is interpreted as the coarse frequency offset in number of carriers. Next, it performs equalization in one or two dimensions on a tagged OFDM frame. The actual equalization is done by a ofdm_frame_equalizer object, outside of the block.

    Note that the tag with the coarse carrier offset is not removed. Blocks downstream from this block must not attempt to also correct this offset.

    Input: a tagged series of OFDM symbols. Output: The same as the input, but equalized and frequency-corrected.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted):
        """
        make(int fft_len, int cp_len, std::string const & tsb_key, bool propagate_channel_state, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped, bool input_is_shifted) -> ofdm_frame_equalizer1_vcvc_sptr



        Params: (fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_make(fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)

    make = staticmethod(make)
    __swig_destroy__ = _projectCACHE_swig.delete_ofdm_frame_equalizer1_vcvc
    __del__ = lambda self: None
ofdm_frame_equalizer1_vcvc_swigregister = _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_swigregister
ofdm_frame_equalizer1_vcvc_swigregister(ofdm_frame_equalizer1_vcvc)

def ofdm_frame_equalizer1_vcvc_make(fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted):
    """
    ofdm_frame_equalizer1_vcvc_make(int fft_len, int cp_len, std::string const & tsb_key, bool propagate_channel_state, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped, bool input_is_shifted) -> ofdm_frame_equalizer1_vcvc_sptr



    Params: (fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)
    """
    return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_make(fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)

class ofdm_frame_equalizer1_vcvc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::projectCACHE::ofdm_frame_equalizer1_vcvc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::projectCACHE::ofdm_frame_equalizer1_vcvc)> self) -> ofdm_frame_equalizer1_vcvc_sptr
        __init__(boost::shared_ptr<(gr::projectCACHE::ofdm_frame_equalizer1_vcvc)> self, ofdm_frame_equalizer1_vcvc p) -> ofdm_frame_equalizer1_vcvc_sptr
        """
        this = _projectCACHE_swig.new_ofdm_frame_equalizer1_vcvc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ofdm_frame_equalizer1_vcvc_sptr self) -> ofdm_frame_equalizer1_vcvc"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr___deref__(self)

    __swig_destroy__ = _projectCACHE_swig.delete_ofdm_frame_equalizer1_vcvc_sptr
    __del__ = lambda self: None

    def make(self, fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted):
        """
        make(ofdm_frame_equalizer1_vcvc_sptr self, int fft_len, int cp_len, std::string const & tsb_key, bool propagate_channel_state, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & occupied_carriers, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const & pilot_carriers, gr_vector_vector_complexf pilot_symbols, int symbols_skipped, bool input_is_shifted) -> ofdm_frame_equalizer1_vcvc_sptr



        Params: (fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_make(self, fft_len, cp_len, tsb_key, propagate_channel_state, occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped, input_is_shifted)


    def history(self):
        """history(ofdm_frame_equalizer1_vcvc_sptr self) -> unsigned int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ofdm_frame_equalizer1_vcvc_sptr self, int which, int delay)
        declare_sample_delay(ofdm_frame_equalizer1_vcvc_sptr self, unsigned int delay)
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> unsigned int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ofdm_frame_equalizer1_vcvc_sptr self) -> int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ofdm_frame_equalizer1_vcvc_sptr self) -> double"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_relative_rate(self)


    def start(self):
        """start(ofdm_frame_equalizer1_vcvc_sptr self) -> bool"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_start(self)


    def stop(self):
        """stop(ofdm_frame_equalizer1_vcvc_sptr self) -> bool"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ofdm_frame_equalizer1_vcvc_sptr self, unsigned int which_input) -> uint64_t"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ofdm_frame_equalizer1_vcvc_sptr self, unsigned int which_output) -> uint64_t"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self) -> int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self, int m)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self) -> bool"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self, int m)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self) -> int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ofdm_frame_equalizer1_vcvc_sptr self, int i) -> long"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ofdm_frame_equalizer1_vcvc_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_frame_equalizer1_vcvc_sptr self, int port, long max_output_buffer)
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ofdm_frame_equalizer1_vcvc_sptr self, int i) -> long"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ofdm_frame_equalizer1_vcvc_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_frame_equalizer1_vcvc_sptr self, int port, long min_output_buffer)
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_frame_equalizer1_vcvc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_frame_equalizer1_vcvc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_frame_equalizer1_vcvc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_frame_equalizer1_vcvc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_frame_equalizer1_vcvc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ofdm_frame_equalizer1_vcvc_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_frame_equalizer1_vcvc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ofdm_frame_equalizer1_vcvc_sptr self) -> float"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ofdm_frame_equalizer1_vcvc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ofdm_frame_equalizer1_vcvc_sptr self)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ofdm_frame_equalizer1_vcvc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ofdm_frame_equalizer1_vcvc_sptr self) -> int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ofdm_frame_equalizer1_vcvc_sptr self) -> int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ofdm_frame_equalizer1_vcvc_sptr self, int priority) -> int"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ofdm_frame_equalizer1_vcvc_sptr self) -> std::string"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ofdm_frame_equalizer1_vcvc_sptr self) -> std::string"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ofdm_frame_equalizer1_vcvc_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ofdm_frame_equalizer1_vcvc_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ofdm_frame_equalizer1_vcvc_sptr self) -> long"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ofdm_frame_equalizer1_vcvc_sptr self) -> basic_block_sptr"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ofdm_frame_equalizer1_vcvc_sptr self, int ninputs, int noutputs) -> bool"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ofdm_frame_equalizer1_vcvc_sptr self) -> std::string"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ofdm_frame_equalizer1_vcvc_sptr self, std::string name)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ofdm_frame_equalizer1_vcvc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ofdm_frame_equalizer1_vcvc_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ofdm_frame_equalizer1_vcvc_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ofdm_frame_equalizer1_vcvc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_message_subscribers(self, which_port)

ofdm_frame_equalizer1_vcvc_sptr_swigregister = _projectCACHE_swig.ofdm_frame_equalizer1_vcvc_sptr_swigregister
ofdm_frame_equalizer1_vcvc_sptr_swigregister(ofdm_frame_equalizer1_vcvc_sptr)


ofdm_frame_equalizer1_vcvc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_frame_equalizer1_vcvc = ofdm_frame_equalizer1_vcvc.make;

class map_header_payload_bc(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(arg1, arg2, lengthtagname):
        """
        make(int arg1, int arg2, std::string const & lengthtagname) -> map_header_payload_bc_sptr

        Return a shared_ptr to a new instance of projectCACHE::map_header_payload_bc.

        To avoid accidental use of raw pointers, projectCACHE::map_header_payload_bc's constructor is in a private implementation class. projectCACHE::map_header_payload_bc::make is the public interface for creating new instances.

        Params: (, , lengthtagname)
        """
        return _projectCACHE_swig.map_header_payload_bc_make(arg1, arg2, lengthtagname)

    make = staticmethod(make)
    __swig_destroy__ = _projectCACHE_swig.delete_map_header_payload_bc
    __del__ = lambda self: None
map_header_payload_bc_swigregister = _projectCACHE_swig.map_header_payload_bc_swigregister
map_header_payload_bc_swigregister(map_header_payload_bc)

def map_header_payload_bc_make(arg2, arg3, lengthtagname):
    """
    map_header_payload_bc_make(int arg2, int arg3, std::string const & lengthtagname) -> map_header_payload_bc_sptr

    Return a shared_ptr to a new instance of projectCACHE::map_header_payload_bc.

    To avoid accidental use of raw pointers, projectCACHE::map_header_payload_bc's constructor is in a private implementation class. projectCACHE::map_header_payload_bc::make is the public interface for creating new instances.

    Params: (, , lengthtagname)
    """
    return _projectCACHE_swig.map_header_payload_bc_make(arg2, arg3, lengthtagname)

class map_header_payload_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::projectCACHE::map_header_payload_bc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::projectCACHE::map_header_payload_bc)> self) -> map_header_payload_bc_sptr
        __init__(boost::shared_ptr<(gr::projectCACHE::map_header_payload_bc)> self, map_header_payload_bc p) -> map_header_payload_bc_sptr
        """
        this = _projectCACHE_swig.new_map_header_payload_bc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(map_header_payload_bc_sptr self) -> map_header_payload_bc"""
        return _projectCACHE_swig.map_header_payload_bc_sptr___deref__(self)

    __swig_destroy__ = _projectCACHE_swig.delete_map_header_payload_bc_sptr
    __del__ = lambda self: None

    def make(self, arg1, arg2, lengthtagname):
        """
        make(map_header_payload_bc_sptr self, int arg1, int arg2, std::string const & lengthtagname) -> map_header_payload_bc_sptr

        Return a shared_ptr to a new instance of projectCACHE::map_header_payload_bc.

        To avoid accidental use of raw pointers, projectCACHE::map_header_payload_bc's constructor is in a private implementation class. projectCACHE::map_header_payload_bc::make is the public interface for creating new instances.

        Params: (, , lengthtagname)
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_make(self, arg1, arg2, lengthtagname)


    def history(self):
        """history(map_header_payload_bc_sptr self) -> unsigned int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(map_header_payload_bc_sptr self, int which, int delay)
        declare_sample_delay(map_header_payload_bc_sptr self, unsigned int delay)
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(map_header_payload_bc_sptr self, int which) -> unsigned int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(map_header_payload_bc_sptr self) -> int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(map_header_payload_bc_sptr self) -> double"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_relative_rate(self)


    def start(self):
        """start(map_header_payload_bc_sptr self) -> bool"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_start(self)


    def stop(self):
        """stop(map_header_payload_bc_sptr self) -> bool"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(map_header_payload_bc_sptr self, unsigned int which_input) -> uint64_t"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(map_header_payload_bc_sptr self, unsigned int which_output) -> uint64_t"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(map_header_payload_bc_sptr self) -> int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(map_header_payload_bc_sptr self, int m)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(map_header_payload_bc_sptr self)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(map_header_payload_bc_sptr self) -> bool"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(map_header_payload_bc_sptr self, int m)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(map_header_payload_bc_sptr self) -> int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(map_header_payload_bc_sptr self, int i) -> long"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(map_header_payload_bc_sptr self, long max_output_buffer)
        set_max_output_buffer(map_header_payload_bc_sptr self, int port, long max_output_buffer)
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(map_header_payload_bc_sptr self, int i) -> long"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(map_header_payload_bc_sptr self, long min_output_buffer)
        set_min_output_buffer(map_header_payload_bc_sptr self, int port, long min_output_buffer)
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(map_header_payload_bc_sptr self, int which) -> float
        pc_input_buffers_full(map_header_payload_bc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(map_header_payload_bc_sptr self, int which) -> float
        pc_input_buffers_full_avg(map_header_payload_bc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(map_header_payload_bc_sptr self, int which) -> float
        pc_input_buffers_full_var(map_header_payload_bc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(map_header_payload_bc_sptr self, int which) -> float
        pc_output_buffers_full(map_header_payload_bc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(map_header_payload_bc_sptr self, int which) -> float
        pc_output_buffers_full_avg(map_header_payload_bc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(map_header_payload_bc_sptr self, int which) -> float
        pc_output_buffers_full_var(map_header_payload_bc_sptr self) -> pmt_vector_float
        """
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(map_header_payload_bc_sptr self) -> float"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(map_header_payload_bc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(map_header_payload_bc_sptr self)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(map_header_payload_bc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(map_header_payload_bc_sptr self) -> int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(map_header_payload_bc_sptr self) -> int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(map_header_payload_bc_sptr self, int priority) -> int"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(map_header_payload_bc_sptr self) -> std::string"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(map_header_payload_bc_sptr self) -> std::string"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(map_header_payload_bc_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(map_header_payload_bc_sptr self) -> io_signature_sptr"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(map_header_payload_bc_sptr self) -> long"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(map_header_payload_bc_sptr self) -> basic_block_sptr"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(map_header_payload_bc_sptr self, int ninputs, int noutputs) -> bool"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(map_header_payload_bc_sptr self) -> std::string"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(map_header_payload_bc_sptr self, std::string name)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(map_header_payload_bc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _projectCACHE_swig.map_header_payload_bc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(map_header_payload_bc_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(map_header_payload_bc_sptr self) -> swig_int_ptr"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(map_header_payload_bc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _projectCACHE_swig.map_header_payload_bc_sptr_message_subscribers(self, which_port)

map_header_payload_bc_sptr_swigregister = _projectCACHE_swig.map_header_payload_bc_sptr_swigregister
map_header_payload_bc_sptr_swigregister(map_header_payload_bc_sptr)


map_header_payload_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
map_header_payload_bc = map_header_payload_bc.make;



